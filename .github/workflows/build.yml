# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: build

on:
  push:
    paths-ignore:
      - '.dev_scripts/**'
      - '.github/**.md'
      - 'demo/**'
      - 'docker/**'
      - 'tools/**'

  pull_request:
    paths-ignore:
      - '.dev_scripts/**'
      - '.github/**.md'
      - 'demo/**'
      - 'docker/**'
      - 'tools/**'
      - 'docs/**'
      - 'docs_zh-CN/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_windows:
    env:
      FORCE_CUDA: 1
      CUDA_ARCH: ${{matrix.cuda_arch}}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2022]
        python: [3.8]
        platform: [cu101]
        cuda_arch: "7.0"
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: Upgrade pip
        run: pip install pip --upgrade --user
      - name: Install PyTorch
        # As a complement to Linux CI, we test on PyTorch LTS version
        run: pip install torch==1.8.0+${{ matrix.platform }} torchvision==0.9.0+${{ matrix.platform }} -f https://download.pytorch.org/whl/torch_stable.html
      - name: Install mmdet3d dependencies
        run: |
          pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/${{matrix.platform}}/torch1.8/index.html --only-binary mmcv-full
          python -m pip install mmdet==2.19.0
          python -m pip install mmsegmentation==0.20.0
          python -m pip install -r requirements/build.txt -r requirements/runtime.txt -r requirements/tests.txt
      - name: Build and install
        run: |
          rm -rf .eggs
          python setup.py check -m -s
          TORCH_CUDA_ARCH_LIST=${CUDA_ARCH} python setup.py build_ext --inplace
      - name: Run unittests and generate coverage report
        run: coverage run --branch --source mmdet3d -m pytest tests/
             coverage xml
             coverage report -m
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          file: ./coverage.xml
          flags: unittests
          env_vars: OS,PYTHON
          name: codecov-umbrella
          fail_ci_if_error: false
